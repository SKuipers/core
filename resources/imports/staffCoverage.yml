details:
    type: staffCoverage
    category: Substitute
    name: Staff Coverage
    table: gibbonStaffCoverage
    modes: { update: true, insert: true, export: true }
access:
    module: Staff
    action: Manage Staff Coverage
fields:
    gibbonPersonID:
        name: "Teacher"
        desc: "Username"
        args: { filter: nospaces, required: true, readonly: true }
        relationship: { table: gibbonPerson, key: gibbonPersonID, field: username  }
    date: 
        name: "Date"
        desc: "Must be unique. Format: YYYY-MM-DD"
        args: { filter: date, required: true, readonly: [gibbonStaffCoverage] }
    # allDay:
    #     name: "All Day"
    #     desc: ""
    #     args: { filter: yesno, custom: true, required: true }
    # timeStart:
    #     name: "Start Time"
    #     desc: "Format: hh:mm (24hr)"
    #     args: { filter: time, custom: true }
    # timeEnd:
    #     name: "End Time"
    #     desc: "Format: hh:mm (24hr)"
    #     args: { filter: time, custom: true }
    status:
        name: "Status"
        desc: ""
        value: "Accepted"
        args: { filter: string, hidden: true }
    requestType:
        name: "Request Type"
        desc: ""
        value: "Individual"
        args: { filter: string, hidden: true }

    

    gibbonPersonIDCoverage:
        name: "Substitute"
        desc: "Username"
        args: { filter: nospaces, required: true, readonly: [gibbonStaffAbsenceDate] }
        relationship: { table: gibbonPerson, key: gibbonPersonID, field: username  }
    timestampCoverage:
        name: "Substitute Timestamp"
        desc: ""
        args: { filter: timestamp, linked: timestampStatus }
    # notesCoverage:
    #     name: "Substitute Notes"
    #     desc: ""
    #     args: { filter: string, custom: true }

    gibbonPersonIDStatus:
        name: "Created By"
        desc: "Username"
        args: { filter: nospaces, linked: gibbonPersonID }
        relationship: { table: gibbonPerson, key: gibbonPersonID, field: username  }
    notesStatus:
        name: "Notes"
        desc: ""
        args: { filter: string, custom: true }
    timestampStatus:
        name: "Created On"
        desc: ""
        args: { filter: timestamp, custom: true }

    gibbonStaffAbsenceID:
        name: "Absence ID"
        desc: ""
        args: { filter: string, linked: date }
        relationship: { table: gibbonStaffAbsenceDate, key: gibbonStaffAbsenceID, join: gibbonStaffAbsence, on: [gibbonStaffAbsenceID, gibbonStaffAbsenceID], field: [ date, gibbonPersonID ]  }
    gibbonStaffCoverageID:
        name: "Coverage ID"
        desc: ""
        args: { filter: string, linked: gibbonStaffAbsenceID, readonly: [gibbonStaffCoverage] }
        relationship: { table: gibbonStaffCoverage, key: gibbonStaffCoverageID, field: [gibbonStaffAbsenceID]  }

tables:
    gibbonStaffCoverage: 
        primaryKey:
            gibbonStaffCoverageID
        uniqueKeys:
            - [ date, gibbonPersonID ]
        fields:
            - gibbonPersonID
            - date
            - gibbonStaffAbsenceID
            - status
            - requestType
            - gibbonPersonIDStatus
            - timestampStatus
            - notesStatus
            - gibbonPersonIDCoverage
            - timestampCoverage
    gibbonStaffAbsenceDate: 
        primaryKey:
            gibbonStaffAbsenceDateID
        uniqueKeys:
            - [ gibbonStaffAbsenceID, date ]
        fields:
            - gibbonStaffCoverageID
            - gibbonStaffAbsenceID
            - date
            # - allDay
            # - timeStart
            # - timeEnd
            - gibbonPersonID
